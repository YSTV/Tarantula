/******************************************************************************
*   Copyright (C) 2011 - 2013  York Student Television
*
*   Tarantula is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   Tarantula is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with Tarantula.  If not, see <http://www.gnu.org/licenses/>.
*
*   Contact     : tarantula@ystv.co.uk
*
*   File Name   : EventProcessor_Demo.cpp
*   Version     : 1.0
*   Description : Demonstration EventProcessor. Generates events to run on
*                 VideoDevice_Demo
*
*****************************************************************************/


#include "EventProcessor_Demo.h"
#include "PluginConfig.h"

/**
 * A sample EventProcessor, should spit back the original event on the first device,
 * plus a child on the same device.
 *
 * @param config Configuration details for this plugin
 * @param h Link back to GlobalStuff structures
 */
EventProcessor_Demo::EventProcessor_Demo (PluginConfig config, Hook h) :
        MouseCatcherProcessorPlugin(config, h)
{
    // In this case no data is needed as this is a demo.
    m_status = READY;

}

EventProcessor_Demo::~EventProcessor_Demo ()
{
}

/**
 * Handle an incoming event directed at this plugin
 * @param originalEvent MouseCatcherEvent The event which spawned this plugin call
 * @param resultingEvents vector<MouseCatcherEvent>* A pointer to a vector of events generated by this call
 */
void EventProcessor_Demo::handleEvent (MouseCatcherEvent originalEvent,
        MouseCatcherEvent& resultingEvent)
{
    if (READY != m_status)
    {
        m_hook.gs->L->error(m_pluginname, "Plugin not in ready state");
        return;
    }

    resultingEvent = originalEvent;
    // Create a child
    MouseCatcherEvent childevent;
    childevent.m_channel = "Campus Stream";
    childevent.m_duration = 1;
    childevent.m_action = 0;
    childevent.m_extradata["output"] = "Campus Stream";
    childevent.m_extradata["input"] = "Inform";
    childevent.m_targetdevice = "demoXpoint";
    resultingEvent.m_childevents.push_back(childevent);

}

extern "C"
{
    void LoadPlugin (Hook h, PluginConfig config, void * pluginref)
    {
        //must declare as pointer to avoid object being deleted once function call is complete!
        pluginref = new EventProcessor_Demo(config, h);
    }
}
